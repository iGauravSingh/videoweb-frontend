import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface UserState {
  value: {
    user: User | null;
    isLoading: boolean;
  };
}

interface User {
  email: string;
  username: string;
}

const initialState: UserState = {
  value: {
    user: null,
    isLoading: true,
  },
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<User>) => {
      state.value.user = action.payload;
      state.value.isLoading = false;
    },
    clearUser: (state) => {
        state.value.user = null;
        state.value.isLoading = false;
    }
  },
});

export const { setUser, clearUser } = userSlice.actions;

export default userSlice.reducer;

///////////////////////////    BELOW IS CHATGPT EXPLAINNATION       /////////////////////////////

// This code is using Redux Toolkit, a set of utilities and abstractions to simplify Redux development. It defines a Redux slice for managing user-related state.

// Here's a breakdown:

// Imports:

// javascript
// Copy code
// import { createSlice, PayloadAction } from "@reduxjs/toolkit";
// createSlice: A function from Redux Toolkit used to define a Redux slice, which includes a reducer and associated actions.
// PayloadAction: A type from Redux Toolkit for defining action payloads.
// Interface:

// javascript
// Copy code
// export interface UserState {
//   value: {
//     user: User | null;
//     isLoading: boolean;
//   };
// }
// Defines an interface UserState representing the structure of the user-related state. It has a nested object value containing user (of type User or null) and isLoading (a boolean).
// User Interface:

// javascript
// Copy code
// interface User {
//   email: string;
//   username: string;
// }
// Defines an interface User representing the structure of a user, with email and username properties.
// Initial State:

// javascript
// Copy code
// const initialState: UserState = {
//   value: {
//     user: null,
//     isLoading: true,
//   },
// };
// Sets the initial state for the user slice. The user is initially null, and isLoading is set to true.
// createSlice:

// javascript
// Copy code
// export const userSlice = createSlice({
//   name: "user",
//   initialState,
//   reducers: {
//     setUser: (state, action: PayloadAction<User>) => {
//       state.value.user = action.payload;
//       state.value.isLoading = false;
//     },
//   },
// });
// Creates a Redux slice named "user" with the specified initial state and a single reducer called setUser. This reducer takes the current state, an action with a payload of type User, and updates the state by setting user to the payload and isLoading to false.
// Export Actions:

// javascript
// Copy code
// export const { setUser } = userSlice.actions;
// Exports the setUser action for external use.
// Export Reducer:

// javascript
// Copy code
// export default userSlice.reducer;
// Exports the reducer function generated by createSlice. This reducer will handle actions related to the "user" slice of the Redux state.
